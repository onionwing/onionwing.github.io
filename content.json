{"meta":{"title":"OnionWing之家","subtitle":"","description":"","author":"Oinon Wing","url":"onionwing.github.io","root":"/"},"pages":[{"title":"categories","date":"2019-11-10T08:30:33.000Z","updated":"2019-11-10T14:36:49.312Z","comments":true,"path":"categories/index.html","permalink":"onionwing.github.io/categories/index.html","excerpt":"","text":""},{"title":"tag","date":"2019-11-10T14:36:16.000Z","updated":"2019-11-10T14:41:57.210Z","comments":true,"path":"tags/index.html","permalink":"onionwing.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"人生只能一路向前","slug":"人生只能一路向前","date":"9999-11-11T02:38:45.000Z","updated":"2020-10-13T09:23:53.293Z","comments":true,"path":"9999/11/11/人生只能一路向前/","link":"","permalink":"onionwing.github.io/9999/11/11/%E4%BA%BA%E7%94%9F%E5%8F%AA%E8%83%BD%E4%B8%80%E8%B7%AF%E5%90%91%E5%89%8D/","excerpt":"","text":"欢迎来到编程小学生onionwing的博客 2019/12/11 0:15 新博客: onionwingcloud.xzy 开始迁移博客，保持两边更新 2019/12/8：计划迁移博客到自己服务器并在12月内完成 2019/12/3：计划开启博客的评论 2020/10/13: orz","categories":[],"tags":[]},{"title":"猫眼字体反爬","slug":"猫眼字体反爬","date":"2020-11-21T04:09:45.000Z","updated":"2020-11-21T04:10:54.462Z","comments":true,"path":"2020/11/21/猫眼字体反爬/","link":"","permalink":"onionwing.github.io/2020/11/21/%E7%8C%AB%E7%9C%BC%E5%AD%97%E4%BD%93%E5%8F%8D%E7%88%AC/","excerpt":"","text":"分析浏览器调试窗口发现只有综合票房是争对爬虫进行了反爬 在network中发现每隔5s左右会重新申请数据，并且woff字体文件也会重新生成 123456789101112131415#找出woff文件并转化为xml格式headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36', 'Referer': 'https://piaofang.maoyan.com/dashboard/movie', 'Accept-Language': 'zh-CN,zh;q=0.9'&#125;response = requests.get(\"https://piaofang.maoyan.com/dashboard-ajax/movie\", headers=headers)response.encoding = 'UTF-8'woff = response.json()['fontStyle']woff = re.findall(\"(?&lt;=//).+?(?=\\\")\", woff.split(' ')[-1])[0]woff = requests.get(\"http://\"+woff)with open(\"maoyan.woff\", \"wb\") as f: for chunk in woff.iter_content(chunk_size=512): f.write(chunk)TTFont('maoyan.woff').saveXML('maoyan.xml') 查看数据并重写 woff文件解析 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273import requestsimport refrom fontTools.ttLib import TTFontimport xmltodictimport osdef main(): headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36', 'Referer': 'https://piaofang.maoyan.com/dashboard/movie', 'Accept-Language': 'zh-CN,zh;q=0.9' &#125; response = requests.get(\"https://piaofang.maoyan.com/dashboard-ajax/movie\", headers=headers) response.encoding = 'UTF-8' woff = response.json()['fontStyle'] woff = re.findall(\"(?&lt;=//).+?(?=\\\")\", woff.split(' ')[-1])[0] woff = requests.get(\"http://\"+woff) movenamedict = &#123;&#125; namedict = &#123;&#125; with open(\"maoyan.woff\", \"wb\") as f: for chunk in woff.iter_content(chunk_size=512): f.write(chunk) TTFont('maoyan.woff').saveXML('maoyan.xml') with open('maoyan.xml', 'r') as f: xmldict = xmltodict.parse(f.read()) for each in xmldict['ttFont']['cmap']['cmap_format_4'][0]['map']: namedict[each['@code']] = each['@name'] numberdict = &#123;&#125; for each in xmldict['ttFont']['glyf']['TTGlyph']: # 重写 if 'uni' in each['@name']: if type(each['contour']) == list: pt = each['contour'][0]['pt'] else: pt = each['contour']['pt'] if pt[0]['@x'] == '42': numberdict[each['@name']] = '0' elif pt[0]['@x'] == '373': numberdict[each['@name']] = '1' elif pt[0]['@x'] == '503': numberdict[each['@name']] = '2' elif pt[0]['@x'] == '130': numberdict[each['@name']] = '3' elif pt[0]['@x'] == '323': numberdict[each['@name']] = '4' elif pt[0]['@x'] == '134': numberdict[each['@name']] = '5' elif pt[0]['@x'] == '410': numberdict[each['@name']] = '6' elif pt[0]['@x'] == '47': numberdict[each['@name']] = '7' elif pt[0]['@x'] == '177': numberdict[each['@name']] = '8' elif pt[0]['@x'] == '139': numberdict[each['@name']] = '9' temp = namedict for i in list(temp): namedict['.' + i] = '.' + namedict[i] temp = numberdict for i in list(temp): numberdict['.' + i] = '.' + numberdict[i] for each in response.json()['movieList']['list']: unit = each['splitBoxSplitUnit'][\"unit\"][0] number = each['splitBoxSplitUnit']['num'].replace('&amp;#', '0').strip().split(';') number.pop() number = str(''.join(list(map(lambda n: numberdict[namedict[n]], number)))) movenamedict[each['movieInfo']['movieName']] = number + unit print(movenamedict) os.remove('maoyan.woff') os.remove('maoyan.xml')if __name__ == '__main__': main()","categories":[{"name":"2020年1月","slug":"2020年1月","permalink":"onionwing.github.io/categories/2020%E5%B9%B41%E6%9C%88/"}],"tags":[{"name":"学习","slug":"学习","permalink":"onionwing.github.io/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"python","slug":"python","permalink":"onionwing.github.io/tags/python/"},{"name":"字体反爬","slug":"字体反爬","permalink":"onionwing.github.io/tags/%E5%AD%97%E4%BD%93%E5%8F%8D%E7%88%AC/"}]},{"title":"猿人学3.访问逻辑 - 推心置腹","slug":"猿人学3.访问逻辑 - 推心置腹(简单)","date":"2020-11-14T10:09:45.000Z","updated":"2020-11-14T10:10:15.834Z","comments":true,"path":"2020/11/14/猿人学3.访问逻辑 - 推心置腹(简单)/","link":"","permalink":"onionwing.github.io/2020/11/14/%E7%8C%BF%E4%BA%BA%E5%AD%A63.%E8%AE%BF%E9%97%AE%E9%80%BB%E8%BE%91%20-%20%E6%8E%A8%E5%BF%83%E7%BD%AE%E8%85%B9(%E7%AE%80%E5%8D%95)/","excerpt":"","text":"分析题目 1.chrome调试可查看到需要的数据在 ‘3’ 中 2.查请求头可知 Cookie中的sessionid是改变的需要我们找到sessionid 3.观察可知logo是在3之前请求的 sessionid大概率在logo中发现responnse headers中的set-Cookie 代码1234567891011121314151617181920212223242526272829303132import requestsimport refrom collections import Counterdef main(): res = [] for i in range(1, 6): url = 'http://match.yuanrenxue.com/logo' headers = &#123; 'Referer': 'http://match.yuanrenxue.com/match/3', 'Accept-Language': 'zh-CN,zh;q=0.9', 'User-Agent': 'yuanrenxue.project' &#125; response = requests.post(url, headers=headers) sessionid = re.findall('(?&lt;=sessionid=).+?(?=;)', response.headers['Set-Cookie'])[0] headers = &#123; 'Cookie': 'sessionid=' + sessionid, 'Referer': 'http://match.yuanrenxue.com/match/3', 'Accept-Language': 'zh-CN,zh;q=0.9', 'User-Agent': 'yuanrenxue.project' &#125; url = 'http://match.yuanrenxue.com/api/match/3?page=' + str(i) response = requests.get(url, headers=headers).json() for each in response['data']: res.append(each[\"value\"]) print(Counter(res).most_common(1)[0][0])if __name__ == '__main__': main()","categories":[{"name":"2020年11月","slug":"2020年11月","permalink":"onionwing.github.io/categories/2020%E5%B9%B411%E6%9C%88/"}],"tags":[{"name":"学习","slug":"学习","permalink":"onionwing.github.io/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"python","slug":"python","permalink":"onionwing.github.io/tags/python/"},{"name":"js渗透","slug":"js渗透","permalink":"onionwing.github.io/tags/js%E6%B8%97%E9%80%8F/"}]},{"title":"Docker学习","slug":"Docker学习","date":"2020-03-14T05:09:45.000Z","updated":"2020-03-15T03:44:06.575Z","comments":true,"path":"2020/03/14/Docker学习/","link":"","permalink":"onionwing.github.io/2020/03/14/Docker%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"Docker学习docker-ce安装官方安装 菜鸟教程 基础命令详细命令参考菜鸟教程 帮助命令docker version 显示 Docker 版本信息。 docker info 显示 Docker 系统信息，包括镜像和容器数 docker –help 镜像操作命令 docker images docker search docker pull docker rmi 容器命令 新建并启动容器 1docker run [OPTIONS] IMAGE [COMMAND][ARG...] OPTIONS： -d: 后台运行容器，并返回容器ID； -i: 以交互模式运行容器，通常与 -t 同时使用； -P: 随机端口映射，容器内部端口随机映射到主机的高端口 -p: 指定端口映射，格式为：主机(宿主)端口:容器端口 -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用； 列出当前所有正在运行的容器 1docker ps [OPTIONS] OPTIONS： -a :显示所有的容器，包括未运行的。 -f :根据条件过滤显示的内容。 –format :指定返回值的模板文件。 -l :显示最近创建的容器。 -n :列出最近创建的n个容器。 –no-trunc :不截断输出。 -q :静默模式，只显示容器编号。 -s :显示总的文件大小。 启动重启退出输出 重要命令 后续补充","categories":[{"name":"2020年3月","slug":"2020年3月","permalink":"onionwing.github.io/categories/2020%E5%B9%B43%E6%9C%88/"}],"tags":[{"name":"学习","slug":"学习","permalink":"onionwing.github.io/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"docker","slug":"docker","permalink":"onionwing.github.io/tags/docker/"}]},{"title":"百度翻译Js渗透","slug":"2020-1-7-百度翻译Js渗透","date":"2020-01-07T05:09:45.000Z","updated":"2020-11-14T10:08:13.788Z","comments":true,"path":"2020/01/07/2020-1-7-百度翻译Js渗透/","link":"","permalink":"onionwing.github.io/2020/01/07/2020-1-7-%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91Js%E6%B8%97%E9%80%8F/","excerpt":"","text":"随便写写 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768import execjsimport requestsimport reclass BaiduTrans(): def __init__(self, string, target): self.string = string self.target = target self.sel = self.lag_sel() self.sess = requests.Session() self.sess.headers = &#123; \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36\" &#125; self.lag1 = self.lag_from() with open(\"./js渗透_百度翻译.js\", \"r\", encoding='utf8') as f: js = f.read() self.js = execjs.compile(js) self.gtk, self.token = self.gtk_token() self.sign = self.get_sign() def lag_sel(self): sel = &#123;\"阿拉伯语\": \"ara\", \"英语\": \"en\", \"日语\": \"jp\", \"中文\": \"zh\", \"文言文\": \"wyw\", \"法语\": \"fra\", \"韩语\": \"kor\", \"意大利语\": \"it\", \"泰语\": \"th\", \"德语\": \"de\", \"爱沙尼亚语\": \"est\", \"保加利亚语\": \"bul\", \"波兰语\": \"est\", \"俄语\": \"ru\", \"芬兰语\": \"fin\", \"荷兰语\": \"nl\", \"捷克语\": \"cs\", \"丹麦语\": \"dan\", \"越南语\": \"vie\", \"葡萄牙语\": \"pt\", \"瑞典语\": \"swe\", \"罗马尼亚语\": \"rom\", \"粤语\": \"yue\", \"中文繁体\": \"cht\", \"斯洛文尼亚语\": \"slo\", \"西班牙语\": \"spa\", \"希腊语\": \"el\", \"匈牙利语\": \"hu\"&#125; sel = sel[self.target] return sel def lag_from(self): pass return self.sess.post(\"https://fanyi.baidu.com/langdetect\", data=&#123;\"query\": self.string, &#125;).json()[\"lan\"] def gtk_token(self): for i in range(2): r = self.sess.get(\"https://fanyi.baidu.com/\") gtk = re.search(r\"window.gtk = '(.*?)';\", r.text).group(1) token = re.search(r\"token: '(.*?)',\", r.text).group(1) return gtk, token def get_sign(self): pass return self.js.call(\"e\", self.string, self.gtk) def translation(self): data = &#123; \"from\": self.lag1, \"to\": self.sel, \"query\": self.string, \"simple_means_flag\": \"3\", \"sign\": self.sign, \"token\": self.token, &#125; r = self.sess.post(f\"https://fanyi.baidu.com/v2transapi?from=&#123;self.lag1&#125;&amp;to=&#123;self.sel&#125;\", data=data) print(r.json()[\"trans_result\"][\"data\"][0][\"dst\"])if __name__ == '__main__': print(\"需要翻译的文字\") connect = input(\"请输入：\") print(\"需要翻译成的语言（不能有空格请规范输入）\") language = input(\"请输入：\") start = BaiduTrans(connect, language) start.translation()","categories":[{"name":"2020年1月","slug":"2020年1月","permalink":"onionwing.github.io/categories/2020%E5%B9%B41%E6%9C%88/"}],"tags":[{"name":"学习","slug":"学习","permalink":"onionwing.github.io/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"python","slug":"python","permalink":"onionwing.github.io/tags/python/"},{"name":"js渗透","slug":"js渗透","permalink":"onionwing.github.io/tags/js%E6%B8%97%E9%80%8F/"}]},{"title":"爬取豆瓣中流浪地球的评论","slug":"爬取豆瓣中流浪地球","date":"2019-12-02T02:42:00.000Z","updated":"2020-03-15T03:03:07.765Z","comments":true,"path":"2019/12/02/爬取豆瓣中流浪地球/","link":"","permalink":"onionwing.github.io/2019/12/02/%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E4%B8%AD%E6%B5%81%E6%B5%AA%E5%9C%B0%E7%90%83/","excerpt":"","text":"待重构 全部未展开 √ 123456789101112131415161718192021222324252627282930import requestsimport reimport timefrom pymongo import MongoClientfrom lxml import etreecollection = MongoClient()['local']['douban']for j in range(0, 21441, 20): get_time = [] get_name = [] get_connect = [] get_xingji = [] headers = &#123;'Host': 'movie.douban.com','User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36'&#125; html = requests.get(f'https://movie.douban.com/subject/26266893/reviews?start=&#123;j&#125;', headers=headers) selector = etree.HTML(html.text) time_douban = selector.xpath(\"//header/span[@class='main-meta']\") user_name = selector.xpath(\"//header[@class='main-hd']/a[@class='name']\") connect = selector.xpath(\"//div[@class='short-content']/text()\") xingji = selector.xpath(\"//header/span[1]\") for cat in xingji: get_xingji.append(cat.attrib.get('title')) for cat in time_douban: get_time.append(cat.text) for cat in user_name: get_name.append(cat.text) for cat in connect: get_connect.append(re.findall(r\" \\s+(.*?)\\.\\.\\.|\\(\", cat, re.S)) for i in range(0, len(get_time)): collection.insert_one(&#123;'时间：': get_time[i], '用户名：': get_name[i], '星级': get_xingji[i], '内容：': get_connect[i][0]&#125;) print(f'https://movie.douban.com/subject/26266893/reviews?start=&#123;j&#125;') time.sleep(1) 全部评论内容思路 2019.12.2 18:07 第一种：一页全部展开拿到完整的html 第二种：拿到每个评论的标题里的href即评论的单独页面再提取文本 （问题：如果有图片怎么办？） 2019.12.4 拿到全文思路 展开评论后 XHR出现一个full 再头里找到它的URL 如 https://movie.douban.com/j/review/9936402/full 里面可拿到全文 拿到 //div[@class=’main-bd’]/h2/a/@href 里的href 如 https://movie.douban.com/review/9936402/ 即在href里拼接 j 与 full 后再爬取全文 12345678910111213import requestsfrom pymongo import MongoClientcollection = MongoClient()['local']['douban']from lxml import etreeconnect = ''headers = &#123;'Host': 'movie.douban.com','User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36'&#125;html = requests.get(f'https://movie.douban.com/j/review/9936402/full', headers=headers)selector = etree.HTML(html.json()[\"body\"])for i in selector.xpath(\"//p/text()\"): connect = connect + i + '\\r\\n'print(connect)","categories":[{"name":"2019年12月","slug":"2019年12月","permalink":"onionwing.github.io/categories/2019%E5%B9%B412%E6%9C%88/"}],"tags":[{"name":"学习","slug":"学习","permalink":"onionwing.github.io/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"爬虫","slug":"爬虫","permalink":"onionwing.github.io/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"Python  turtle","slug":"Python3  turtle","date":"2019-11-12T11:09:45.000Z","updated":"2020-03-15T03:21:49.395Z","comments":true,"path":"2019/11/12/Python3  turtle/","link":"","permalink":"onionwing.github.io/2019/11/12/Python3%20%20turtle/","excerpt":"","text":"Python3 turtle画笔运动命令:123456789turtle.forward(distance) //向当前画笔方向移动distance像素长turtle.backward(distance) // 向当前画笔相反方向移动distance像素长度turtle.right(degree) //顺时针移动degree°turtle.left(degree) //逆时针移动degree°turtle.pendown() //移动时绘制图形,缺省时也为绘制turtle.goto(x,y) //将画笔移动到坐标为x,y的位置turtle.penup() //移动时不绘制图形,提起笔，用于另起一个地方绘制时用turtle.speed(speed)// 画笔绘制的速度范围[0,10]整数turtle.circle() //画圆,半径为正(负),表示圆心在画笔的左边(右边)画圆 画笔控制命令:123456789turtle.pensize(width)// 绘制图形时的宽度turtle.pencolor()// 画笔颜色turtle.fillcolor(colorstring) // 绘制图形的填充颜色turtle.color(color1, color2) // 同时设置pencolor=color1, fillcolor=color2turtle.filling() // 返回当前是否在填充状态turtle.begin_fill() // 准备开始填充图形turtle.end_fill() // 填充完成；turtle.hideturtle() // 隐藏箭头显示；turtle.showturtle() // 与hideturtle()函数对应 全局控制命令:123456turtle.clear() // 清空turtle窗口，但是turtle的位置和状态不会改变turtle.reset() // 清空窗口，重置turtle状态为起始状态turtle.undo() // 撤销上一个turtle动作turtle.isvisible() // 返回当前turtle是否可见stamp() // 复制当前图形turtle.write(s[,font=(&quot;font-name&quot;,font_size,&quot;font_type&quot;)]) // 写文本，s为文本内容，font是字体的参数，里面分别为字体名称，大小和类型；font为可选项, font的参数也是可选项","categories":[{"name":"2019年11月","slug":"2019年11月","permalink":"onionwing.github.io/categories/2019%E5%B9%B411%E6%9C%88/"}],"tags":[{"name":"学习","slug":"学习","permalink":"onionwing.github.io/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"python","slug":"python","permalink":"onionwing.github.io/tags/python/"}]},{"title":"JavaScript学习3","slug":"JavaScript3","date":"2019-11-10T12:38:45.000Z","updated":"2020-03-15T03:21:11.236Z","comments":true,"path":"2019/11/10/JavaScript3/","link":"","permalink":"onionwing.github.io/2019/11/10/JavaScript3/","excerpt":"","text":"js3Math+函数js的Math对象123456789Math方法Math.round() //四舍五入取整Math.floor() //向下取整 floor:地板Math.ceil() //向上取整 ceil:天花板Math.random() //随机数 0-10 js的函数定义函数123456789f()function f()&#123; console.log(&quot;ok&quot;)&#125;f() //打印两个ok先定义再调用 匿名函数 无法执行需要使用到函数表达式 函数表达式：（） + — ！ ~+function(){ ​ }（） //自执行 （function(){ ​ }）（） 或 （function(){ ​ }（）） function sum(x,y,z){ ​ console.log(“x:”+x+”y:”+y”z:”+z) ​ } sum(1,2,3) x:1y:2z:3 sum(1,2) x:1y:2 undefind sum(1,2,3,4) x:1y:2z:3 //修正：适用多种参数 function（）{ ​ console.log(arguments) ​ } //函数返回值 return //声明提前 //函数作用域 时间对象获取时间对象123456789101112131415161718192021var time=new Date()console.log(time) //当前时间console.log(time.getTime()) //时间戳：每个地区时间都不一样//年月日 时分秒 var year=time.getFullYear()var mon=time.getMonth()+1 //外国人从0月开始var date=time.getDate()+1var hour=time.getHours()var min=time.getMinutes()var sec=time.getSeconds()console.log(year+&quot;年&quot;+mon+&quot;月&quot;)//拼接 定时器延时器1234567891011setTimeout(function()&#123; console.log(&quot;onionwing&quot;)&#125;,1000) //1s后打印onionwingfunction f()&#123; console.log(&quot;onionwing&quot;)&#125;setTimeout(f,1000) //推荐这个 定时器12345var st =setInterval(f,1000)clearInterval() //清除setInterval(f,1000)","categories":[{"name":"2019年11月","slug":"2019年11月","permalink":"onionwing.github.io/categories/2019%E5%B9%B411%E6%9C%88/"}],"tags":[{"name":"学习","slug":"学习","permalink":"onionwing.github.io/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"js","slug":"js","permalink":"onionwing.github.io/tags/js/"}]},{"title":"JavaScript学习2","slug":"JavaScript2","date":"2019-11-10T11:38:45.000Z","updated":"2020-03-15T03:05:13.028Z","comments":true,"path":"2019/11/10/JavaScript2/","link":"","permalink":"onionwing.github.io/2019/11/10/JavaScript2/","excerpt":"","text":"JavaScript2算术运算符 数与数的计算 + - * / ++ – %数和字符的运算+是拼接并转为数字 -为用数数计算 12345var num=5 console.log(num+undefined) //NANconsole.log(num+null) //5 赋值运算符 += -= *= /=12345var num=5console.log(num+=undefined) //NaNconsole.log(num+=null) //NaN 逻辑运算符 &amp;&amp; 与 ||或 ！非 ？？？？？123456789101112131415161718192021222324252627console.log(0&amp;&amp;0&amp;&amp;5) //0console.log(10&amp;&amp;5&amp;&amp;undefined) //undefinedconsole.log(10||5||10) //是真就返回第一个数字//短路计算console.log(5&amp;&amp;false||null) //null 5&amp;&amp;false返回0 //取反 ！ *只要不是数字就是true*console.log(!undefined) //trueconsole.log(!null) //trueconsole.log(!10) //false//比较运算符 &gt; &gt;= &lt; &lt;= == ===var num=5var str=&quot;5&quot;console.log(num==str) //trueconsole.log(num===str) //false 严格相等 控制流程 if var name=&quot;onionwing&quot; if(name==&quot;onionwing&quot;){ console.log(naem+&quot;我&quot;) } else{ console.log(naem+&quot;你&quot;) } 三目运算符 判断条件?console.log(name+”我”);console.log(naem+”你”) switch 123456789switch()&#123; case&quot;onionwing&quot;:console.log(naem+&quot;我&quot;) case&quot;onionwing&quot;:console.log(naem+&quot;你&quot;) default:console.log(&quot;你...&quot;)&#125; for循环 与C语言相同 for是一个快级作用域，所以当你把这四个li绑定事件通过for循环处理 1234567891011121314151617181920212223242526272829303132333435for(var i=0:i&lt;obj.length;i++)&#123;​ obj[i].onclick=function()&#123;​ console.log(i)​ &#125;&#125; //错误的 都为obj.length改for(let i=0:i&lt;obj.length;i++)&#123;​ obj[i].onclick=function()&#123;​ console.log(i)​ &#125;&#125;for(var i=0:i&lt;obj.length;i++)&#123;​ obj[i].num=i​ obj[i].onclick=function()&#123;​ console.log(this.num)​ &#125;&#125; break//只退出当次循环 continue while 与C语言相同 do while 与C语言相同 先做在循环 字符串1234567891011121314151617181920212223var str=&quot;hello world&quot;console.log(str.length) //字符串长度console.log(str[]) //下标console.log(str.indexof(&quot;e&quot;))console.log(str.indexof(&quot;e&quot;,4))console.log(str.indexof(&quot;x&quot;)) //-1console.log(str.polit(&quot;0,4&quot;)) //切片console.log(str.substring(0,4)) //包前不报后 切片console.log(str.substring(-2,4)) //负数当成0console.log(str.substring(4，1)) //自动交换console.log(str.slice(0,4)) //切片console.log(str.slice(4,2)) //不能自动切换 并不会把负数当成0 数组方法数组的两种创建方法123var a=[1,2,3] var a =new Array() 可读可写1234567891011121314151617181920212223242526272829arr=[1,2,3,4]console.log(arr[0])arr[0]=5 //改//pusharr.push(&quot;a&quot;,&quot;b&quot;) 在后面添加 可加一个或多个//unshiftarr.unshift(&quot;a&quot;,&quot;b&quot;) 在前面添加 可加一个或多个//poparr.pop() 删除最后一个//shiftarr.shift() 删除前面第一个//splice 删除arr.splice(2) 截取2位从前到后arr.splice(1,2) //第一个参数是开始的位置，第二个参数表示删除位数arr.splice(1,2，“位置1”，“位置2”) //第一个参数是开始的位置，第二个参数表示删除位数 后面的参数代替位置 //排序 ASCALL码排序 var arr[0,-1,5,-4,8] console.log(arr.sort()) arr.sort(function(a,b){ return a-b }) //一定要用sort的话 join str=arr.join(“_”) console.log(arr) 补充方法1234567891011121314151617181920212223var a= 123.666//tostringvar b=a.toString() //b变为了str//tofixed 四舍五入var b=a.toFixed() //b==124//parseint 转换成int,parseFloat转换成float//Numberconsole.log(Number(b)) 转换成数字//isNanN 是的 不是一个整形console.log(isNaN(var)) //faluse//isArrary 方法在Array里面 判断是不是数组console.log(isArray.isArray())","categories":[{"name":"2019年11月","slug":"2019年11月","permalink":"onionwing.github.io/categories/2019%E5%B9%B411%E6%9C%88/"}],"tags":[{"name":"学习","slug":"学习","permalink":"onionwing.github.io/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"js","slug":"js","permalink":"onionwing.github.io/tags/js/"}]},{"title":"JavaScript学习1","slug":"JavaScript1","date":"2019-11-10T10:38:45.000Z","updated":"2019-12-02T02:48:18.162Z","comments":true,"path":"2019/11/10/JavaScript1/","link":"","permalink":"onionwing.github.io/2019/11/10/JavaScript1/","excerpt":"","text":"JavaScript1 基本使用 加了var就是全局变量 alert(“你好”) //刷新页面时出现 console.log() 相当于print 1234567891011var obj=document.getElementsByTagName(\"div\") 获取div对象 返回的是数组 //通过获取标签对象，修改属性var obj=document.getElementsByClassName(\"div\") 获取class对象 返回的是数组 //通过获取class类对象，修改属性var obj=document.getElementById(\"id\") 获取id对象 返回的是数组 //通过获取id类对象，修改属性var obj=document.querySelector(\".class\") //通过css选择器来获取对象：获取第一个var obj=document.querySelectorAll(\"div\") //通过css选择器来获取对象：获取多个 返回的是数组 简单事件 - 点击事件 obj.onclick=function(){console.log(\"单击\")} obj.ondblclick=function(){console.log(\"双击\")} - 鼠标移入移出 obj.onmouseenter=function(){obj.style.color=\"red\"} //进 obj.onmouseleave=function(){obj.style.color=\"yellow\" } //出 - 窗口变化 当窗口变化了产生反应 window.onresize=function(){ } - 下拉框 当下拉框变化了产生反应 var obj=document.querySelector(\"\" ) obj.onchange=function(){ } //首先你要有一个下拉框哦 &lt;!--￼1--&gt; 数据类型 typeof()看类型123456789101112131415161718192021222324252627282930313233//字符串var name =\"onionwing\"//数字var age=18console.log(typeof(age))console.log(typeof NaN) //not a number: 不是不是数字//布尔var flag=true//undefinedvar aconsole.log(typeof a) //返回undefined//null 类型：归于objectvar a=null//object类:数组[] 属于一组属性和方法的集合var arr=[1,2,3]var user=&#123;name:\"onionwing\",&#125;//函数不是数据类型","categories":[{"name":"2019年11月","slug":"2019年11月","permalink":"onionwing.github.io/categories/2019%E5%B9%B411%E6%9C%88/"}],"tags":[{"name":"学习","slug":"学习","permalink":"onionwing.github.io/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"js","slug":"js","permalink":"onionwing.github.io/tags/js/"}]}]}