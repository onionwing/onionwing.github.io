<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>百度翻译Js渗透</title>
    <url>/2020/01/07/2020-1-7-%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91Js%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<p>随便写写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaiduTrans</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, string, target)</span>:</span></span><br><span class="line">        self.string = string</span><br><span class="line">        self.target = target</span><br><span class="line"></span><br><span class="line">        self.sel = self.lag_sel()</span><br><span class="line">        self.sess = requests.Session()</span><br><span class="line">        self.sess.headers = &#123;</span><br><span class="line">            <span class="string">"user-agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.lag1 = self.lag_from()</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"./js渗透_百度翻译.js"</span>, <span class="string">"r"</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            js = f.read()</span><br><span class="line">        self.js = execjs.compile(js)</span><br><span class="line">        self.gtk, self.token = self.gtk_token()</span><br><span class="line">        self.sign = self.get_sign()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lag_sel</span><span class="params">(self)</span>:</span></span><br><span class="line">        sel = &#123;<span class="string">"阿拉伯语"</span>: <span class="string">"ara"</span>, <span class="string">"英语"</span>: <span class="string">"en"</span>, <span class="string">"日语"</span>: <span class="string">"jp"</span>, <span class="string">"中文"</span>: <span class="string">"zh"</span>, <span class="string">"文言文"</span>: <span class="string">"wyw"</span>,</span><br><span class="line">               <span class="string">"法语"</span>: <span class="string">"fra"</span>, <span class="string">"韩语"</span>: <span class="string">"kor"</span>, <span class="string">"意大利语"</span>: <span class="string">"it"</span>, <span class="string">"泰语"</span>: <span class="string">"th"</span>, <span class="string">"德语"</span>: <span class="string">"de"</span>,</span><br><span class="line">               <span class="string">"爱沙尼亚语"</span>: <span class="string">"est"</span>, <span class="string">"保加利亚语"</span>: <span class="string">"bul"</span>, <span class="string">"波兰语"</span>: <span class="string">"est"</span>, <span class="string">"俄语"</span>: <span class="string">"ru"</span>,</span><br><span class="line">               <span class="string">"芬兰语"</span>: <span class="string">"fin"</span>, <span class="string">"荷兰语"</span>: <span class="string">"nl"</span>, <span class="string">"捷克语"</span>: <span class="string">"cs"</span>, <span class="string">"丹麦语"</span>: <span class="string">"dan"</span>, <span class="string">"越南语"</span>: <span class="string">"vie"</span>,</span><br><span class="line">               <span class="string">"葡萄牙语"</span>: <span class="string">"pt"</span>, <span class="string">"瑞典语"</span>: <span class="string">"swe"</span>, <span class="string">"罗马尼亚语"</span>: <span class="string">"rom"</span>, <span class="string">"粤语"</span>: <span class="string">"yue"</span>, <span class="string">"中文繁体"</span>: <span class="string">"cht"</span>,</span><br><span class="line">               <span class="string">"斯洛文尼亚语"</span>: <span class="string">"slo"</span>, <span class="string">"西班牙语"</span>: <span class="string">"spa"</span>, <span class="string">"希腊语"</span>: <span class="string">"el"</span>, <span class="string">"匈牙利语"</span>: <span class="string">"hu"</span>&#125;</span><br><span class="line">        sel = sel[self.target]</span><br><span class="line">        <span class="keyword">return</span> sel</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lag_from</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> self.sess.post(<span class="string">"https://fanyi.baidu.com/langdetect"</span>, data=&#123;<span class="string">"query"</span>: self.string, &#125;).json()[<span class="string">"lan"</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gtk_token</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">            r = self.sess.get(<span class="string">"https://fanyi.baidu.com/"</span>)</span><br><span class="line">            gtk = re.search(<span class="string">r"window.gtk = '(.*?)';"</span>, r.text).group(<span class="number">1</span>)</span><br><span class="line">            token = re.search(<span class="string">r"token: '(.*?)',"</span>, r.text).group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> gtk, token</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_sign</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> self.js.call(<span class="string">"e"</span>, self.string, self.gtk)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">translation</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">                <span class="string">"from"</span>: self.lag1,</span><br><span class="line">                <span class="string">"to"</span>: self.sel,</span><br><span class="line">                <span class="string">"query"</span>: self.string,</span><br><span class="line">                <span class="string">"simple_means_flag"</span>: <span class="string">"3"</span>,</span><br><span class="line">                <span class="string">"sign"</span>: self.sign,</span><br><span class="line">                <span class="string">"token"</span>: self.token,</span><br><span class="line">                 &#125;</span><br><span class="line">        r = self.sess.post(<span class="string">f"https://fanyi.baidu.com/v2transapi?from=<span class="subst">&#123;self.lag1&#125;</span>&amp;to=<span class="subst">&#123;self.sel&#125;</span>"</span>, data=data)</span><br><span class="line">        print(r.json()[<span class="string">"trans_result"</span>][<span class="string">"data"</span>][<span class="number">0</span>][<span class="string">"dst"</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"需要翻译的文字"</span>)</span><br><span class="line">    connect = input(<span class="string">"请输入："</span>)</span><br><span class="line">    print(<span class="string">"需要翻译成的语言（不能有空格请规范输入）"</span>)</span><br><span class="line">    language = input(<span class="string">"请输入："</span>)</span><br><span class="line">    start = BaiduTrans(connect, language)</span><br><span class="line">    start.translation()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>2020年1月</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>python</tag>
        <tag>js渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript学习1</title>
    <url>/2019/11/10/JavaScript1/</url>
    <content><![CDATA[<h1 id="JavaScript1"><a href="#JavaScript1" class="headerlink" title="JavaScript1     "></a>JavaScript1  <script>   </script></h1><h2 id="基本使用-加了var就是全局变量"><a href="#基本使用-加了var就是全局变量" class="headerlink" title="基本使用  加了var就是全局变量"></a>基本使用  加了var就是全局变量</h2><ul>
<li>alert(“你好”) //刷新页面时出现          console.log() 相当于print</li>
<li><script src="引用外部文件"></script> 

</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)  获取div对象 返回的是数组 <span class="comment">//通过获取标签对象，修改属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj=<span class="built_in">document</span>.getElementsByClassName(<span class="string">"div"</span>) 获取<span class="class"><span class="keyword">class</span>对象 返回的是数组 //通过获取<span class="title">class</span>类对象，修改属性</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">var</span> <span class="title">obj</span></span>=<span class="built_in">document</span>.getElementById(<span class="string">"id"</span>) 获取id对象 返回的是数组 <span class="comment">//通过获取id类对象，修改属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj=<span class="built_in">document</span>.querySelector(<span class="string">".class"</span>) <span class="comment">//通过css选择器来获取对象：获取第一个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj=<span class="built_in">document</span>.querySelectorAll(<span class="string">"div"</span>) <span class="comment">//通过css选择器来获取对象：获取多个 返回的是数组</span></span><br></pre></td></tr></table></figure>



<h2 id="简单事件"><a href="#简单事件" class="headerlink" title="简单事件"></a>简单事件</h2><ul>
<li><pre><code class="javascript">- 点击事件     

  obj.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{<span class="built_in">console</span>.log(<span class="string">"单击"</span>)}

  obj.ondblclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{<span class="built_in">console</span>.log(<span class="string">"双击"</span>)}

- 鼠标移入移出   

  obj.onmouseenter=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{obj.style.color=<span class="string">"red"</span>} <span class="comment">//进</span>

  obj.onmouseleave=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{obj.style.color=<span class="string">"yellow"</span>    }  <span class="comment">//出</span>

- 窗口变化   当窗口变化了产生反应

  <span class="built_in">window</span>.onresize=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{ }

- 下拉框  当下拉框变化了产生反应

  <span class="keyword">var</span> obj=<span class="built_in">document</span>.querySelector(<span class="string">""</span> )

  obj.onchange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{  }  <span class="comment">//首先你要有一个下拉框哦</span>
&lt;!--￼<span class="number">1</span>--&gt;


</code></pre>
</li>
</ul>
<h2 id="数据类型-typeof-看类型"><a href="#数据类型-typeof-看类型" class="headerlink" title="数据类型   typeof()看类型"></a>数据类型   typeof()看类型</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name =<span class="string">"onionwing"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age=<span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(age))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">NaN</span>)   <span class="comment">//not a number: 不是不是数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//布尔</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flag=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a) <span class="comment">//返回undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//null  类型：归于object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=<span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//object类:数组[]  属于一组属性和方法的集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user=&#123;<span class="attr">name</span>:<span class="string">"onionwing"</span>,&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数不是数据类型</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>2019年11月</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker学习</title>
    <url>/2020/03/14/Docker%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Docker学习"><a href="#Docker学习" class="headerlink" title="Docker学习"></a>Docker学习</h1><h2 id="docker-ce安装"><a href="#docker-ce安装" class="headerlink" title="docker-ce安装"></a>docker-ce安装</h2><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/">官方安装</a></p>
<p><a href="https://www.runoob.com/docker/ubuntu-docker-install.html">菜鸟教程</a></p>
<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><p>详细命令参考<a href="https://www.runoob.com/docker/docker-command-manual.html">菜鸟教程</a></p>
<h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><p>docker version  显示 Docker 版本信息。 </p>
<p>docker info 显示 Docker 系统信息，包括镜像和容器数 </p>
<p>docker –help</p>
<h3 id="镜像操作命令"><a href="#镜像操作命令" class="headerlink" title="镜像操作命令"></a>镜像操作命令</h3><ol>
<li>docker images</li>
</ol>
<p><img src="https://s1.ax1x.com/2020/03/13/8uDGM6.png" alt=""></p>
<ol start="2">
<li>docker search</li>
</ol>
<p><img src="https://s1.ax1x.com/2020/03/14/8Mgcwt.png" alt=""></p>
<ol start="3">
<li>docker pull</li>
</ol>
<p><img src="https://s1.ax1x.com/2020/03/14/8Mgryd.png" alt=""></p>
<ol start="4">
<li>docker rmi</li>
</ol>
<p><img src="https://s1.ax1x.com/2020/03/14/8Mg6eI.png" alt=""></p>
<h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><ol>
<li><p>新建并启动容器 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND][ARG...]</span><br></pre></td></tr></table></figure>

<p>OPTIONS：</p>
<ul>
<li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li>
<li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li>
<li><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的高端口</li>
<li><strong>-p:</strong> 指定端口映射，格式为：主机(宿主)端口:容器端口</li>
<li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>
</ul>
</li>
<li><p>列出当前所有正在运行的容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps [OPTIONS]</span><br></pre></td></tr></table></figure>

<p>OPTIONS：</p>
<ul>
<li><strong>-a :</strong>显示所有的容器，包括未运行的。</li>
<li><strong>-f :</strong>根据条件过滤显示的内容。</li>
<li><strong>–format :</strong>指定返回值的模板文件。</li>
<li><strong>-l :</strong>显示最近创建的容器。</li>
<li><strong>-n :</strong>列出最近创建的n个容器。</li>
<li><strong>–no-trunc :</strong>不截断输出。</li>
<li><strong>-q :</strong>静默模式，只显示容器编号。</li>
<li><strong>-s :</strong>显示总的文件大小。</li>
</ul>
</li>
<li><p>启动重启退出输出</p>
<p><img src="https://s1.ax1x.com/2020/03/14/8QkbtA.png" alt=""></p>
</li>
<li><p>重要命令</p>
<p><img src="https://s1.ax1x.com/2020/03/14/8QAREQ.png" alt=""></p>
</li>
</ol>
<p><strong>后续补充</strong></p>
]]></content>
      <categories>
        <category>2020年3月</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript学习2</title>
    <url>/2019/11/10/JavaScript2/</url>
    <content><![CDATA[<h1 id="JavaScript2"><a href="#JavaScript2" class="headerlink" title="JavaScript2"></a>JavaScript2</h1><h2 id="算术运算符-数与数的计算-–"><a href="#算术运算符-数与数的计算-–" class="headerlink" title="算术运算符  数与数的计算   +  -  *  /  ++  –  %"></a>算术运算符  数与数的计算   +  -  *  /  ++  –  %</h2><h3 id="数和字符的运算"><a href="#数和字符的运算" class="headerlink" title="数和字符的运算"></a>数和字符的运算</h3><p>+是拼接并转为数字</p>
<p>-为用数数计算</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var num=5 </span><br><span class="line"></span><br><span class="line">console.log(num+undefined)  	//NAN</span><br><span class="line"></span><br><span class="line">console.log(num+null)  	 //5</span><br></pre></td></tr></table></figure>



<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符          +=   -=   *=   /="></a>赋值运算符          +=   -=   *=   /=</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var num=5</span><br><span class="line"></span><br><span class="line">console.log(num+=undefined)	  //NaN</span><br><span class="line"></span><br><span class="line">console.log(num+=null) 	 //NaN</span><br></pre></td></tr></table></figure>



<h2 id="逻辑运算符-amp-amp-与-或-！非-？？？？？"><a href="#逻辑运算符-amp-amp-与-或-！非-？？？？？" class="headerlink" title="逻辑运算符   &amp;&amp; 与   ||或   ！非      ？？？？？"></a>逻辑运算符   &amp;&amp; 与   ||或   ！非      ？？？？？</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(0&amp;&amp;0&amp;&amp;5)  //0</span><br><span class="line"></span><br><span class="line">console.log(10&amp;&amp;5&amp;&amp;undefined)   //undefined</span><br><span class="line"></span><br><span class="line">console.log(10||5||10)   //是真就返回第一个数字</span><br><span class="line"></span><br><span class="line">//短路计算</span><br><span class="line"></span><br><span class="line">console.log(5&amp;&amp;false||null)  //null     5&amp;&amp;false返回0        </span><br><span class="line"></span><br><span class="line">//取反 ！  *只要不是数字就是true*</span><br><span class="line"></span><br><span class="line">console.log(!undefined)  //true</span><br><span class="line"></span><br><span class="line">console.log(!null) 	 //true</span><br><span class="line"></span><br><span class="line">console.log(!10)	 //false</span><br><span class="line"></span><br><span class="line">//比较运算符  &gt; &gt;=  &lt; &lt;= ==  ===</span><br><span class="line"></span><br><span class="line">var num=5</span><br><span class="line"></span><br><span class="line">var str=&quot;5&quot;</span><br><span class="line"></span><br><span class="line">console.log(num==str) 	//true</span><br><span class="line"></span><br><span class="line">console.log(num===str)	//false   严格相等</span><br></pre></td></tr></table></figure>



<h2 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h2><ul>
<li><p>if</p>
<pre><code>var name=&quot;onionwing&quot;

if(name==&quot;onionwing&quot;){

    console.log(naem+&quot;我&quot;)

}

else{

    console.log(naem+&quot;你&quot;)

}</code></pre></li>
</ul>
<ul>
<li>三目运算符</li>
</ul>
<p>判断条件?console.log(name+”我”);console.log(naem+”你”)</p>
<ul>
<li><p>switch</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">switch()&#123;</span><br><span class="line"></span><br><span class="line">	case&quot;onionwing&quot;:console.log(naem+&quot;我&quot;)</span><br><span class="line"></span><br><span class="line">	case&quot;onionwing&quot;:console.log(naem+&quot;你&quot;)</span><br><span class="line"></span><br><span class="line">	default:console.log(&quot;你...&quot;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>for循环  与C语言相同        for是一个快级作用域，所以当你把这四个li绑定事件通过for循环处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(var i=0:i&lt;obj.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">​	obj[i].onclick=function()&#123;</span><br><span class="line"></span><br><span class="line">​		console.log(i)</span><br><span class="line"></span><br><span class="line">​		&#125;</span><br><span class="line"></span><br><span class="line">&#125;   //错误的   都为obj.length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">改</span><br><span class="line"></span><br><span class="line">for(let i=0:i&lt;obj.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">​	obj[i].onclick=function()&#123;</span><br><span class="line"></span><br><span class="line">​		console.log(i)</span><br><span class="line"></span><br><span class="line">​		&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(var i=0:i&lt;obj.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">​	obj[i].num=i</span><br><span class="line"></span><br><span class="line">​	obj[i].onclick=function()&#123;</span><br><span class="line"></span><br><span class="line">​		console.log(this.num)</span><br><span class="line"></span><br><span class="line">​		&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>break//只退出当次循环  continue</p>
</li>
<li><p>while   与C语言相同</p>
</li>
<li><p>do  while  与C语言相同  先做在循环</p>
</li>
</ul>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var str=&quot;hello world&quot;</span><br><span class="line"></span><br><span class="line">console.log(str.length)  //字符串长度</span><br><span class="line"></span><br><span class="line">console.log(str[]) //下标</span><br><span class="line"></span><br><span class="line">console.log(str.indexof(&quot;e&quot;))</span><br><span class="line"></span><br><span class="line">console.log(str.indexof(&quot;e&quot;,4))</span><br><span class="line"></span><br><span class="line">console.log(str.indexof(&quot;x&quot;))  //-1</span><br><span class="line"></span><br><span class="line">console.log(str.polit(&quot;0,4&quot;))  //切片</span><br><span class="line"></span><br><span class="line">console.log(str.substring(0,4))   //包前不报后     切片</span><br><span class="line"></span><br><span class="line">console.log(str.substring(-2,4))   //负数当成0</span><br><span class="line"></span><br><span class="line">console.log(str.substring(4，1))  //自动交换</span><br><span class="line"></span><br><span class="line">console.log(str.slice(0,4))   //切片</span><br><span class="line"></span><br><span class="line">console.log(str.slice(4,2))  //不能自动切换   并不会把负数当成0</span><br></pre></td></tr></table></figure>



<h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><h3 id="数组的两种创建方法"><a href="#数组的两种创建方法" class="headerlink" title="数组的两种创建方法"></a>数组的两种创建方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a=[1,2,3]  </span><br><span class="line"></span><br><span class="line">var a =new Array()</span><br></pre></td></tr></table></figure>



<h3 id="可读可写"><a href="#可读可写" class="headerlink" title="可读可写"></a>可读可写</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arr=[1,2,3,4]</span><br><span class="line"></span><br><span class="line">console.log(arr[0])</span><br><span class="line"></span><br><span class="line">arr[0]=5   //改</span><br><span class="line"></span><br><span class="line">//push</span><br><span class="line"></span><br><span class="line">arr.push(&quot;a&quot;,&quot;b&quot;)  在后面添加 可加一个或多个</span><br><span class="line"></span><br><span class="line">//unshift</span><br><span class="line"></span><br><span class="line">arr.unshift(&quot;a&quot;,&quot;b&quot;)  在前面添加 可加一个或多个</span><br><span class="line"></span><br><span class="line">//pop</span><br><span class="line"></span><br><span class="line">arr.pop()  删除最后一个</span><br><span class="line"></span><br><span class="line">//shift</span><br><span class="line"></span><br><span class="line">arr.shift() 删除前面第一个</span><br><span class="line"></span><br><span class="line">//splice 删除</span><br><span class="line"></span><br><span class="line">arr.splice(2)  截取2位从前到后</span><br><span class="line"></span><br><span class="line">arr.splice(1,2)  //第一个参数是开始的位置，第二个参数表示删除位数</span><br><span class="line"></span><br><span class="line">arr.splice(1,2，“位置1”，“位置2”)  //第一个参数是开始的位置，第二个参数表示删除位数  后面的参数代替位置</span><br></pre></td></tr></table></figure>

<p>//排序  ASCALL码排序</p>
<ul>
<li><p>var arr[0,-1,5,-4,8]</p>
<pre><code>console.log(arr.sort())

arr.sort(function(a,b){

    return a-b        

})   //一定要用sort的话</code></pre></li>
<li><p>join</p>
<p>str=arr.join(“_”)</p>
<p>console.log(arr)</p>
</li>
</ul>
<h2 id="补充方法"><a href="#补充方法" class="headerlink" title="补充方法"></a>补充方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a= 123.666</span><br><span class="line"></span><br><span class="line">//tostring</span><br><span class="line"></span><br><span class="line">var b=a.toString()   //b变为了str</span><br><span class="line"></span><br><span class="line">//tofixed  四舍五入</span><br><span class="line"></span><br><span class="line">var b=a.toFixed()  //b==124</span><br><span class="line"></span><br><span class="line">//parseint	转换成int,parseFloat转换成float</span><br><span class="line"></span><br><span class="line">//Number</span><br><span class="line"></span><br><span class="line">console.log(Number(b))  转换成数字</span><br><span class="line"></span><br><span class="line">//isNanN    是的   不是一个整形</span><br><span class="line"></span><br><span class="line">console.log(isNaN(var))  //faluse</span><br><span class="line"></span><br><span class="line">//isArrary   方法在Array里面   判断是不是数组</span><br><span class="line"></span><br><span class="line">console.log(isArray.isArray())</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>2019年11月</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Python  turtle</title>
    <url>/2019/11/12/Python3%20%20turtle/</url>
    <content><![CDATA[<h1 id="Python3-turtle"><a href="#Python3-turtle" class="headerlink" title="Python3  turtle"></a>Python3  turtle</h1><h2 id="画笔运动命令"><a href="#画笔运动命令" class="headerlink" title="画笔运动命令:"></a>画笔运动命令:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">turtle.forward(distance)  //向当前画笔方向移动distance像素长</span><br><span class="line">turtle.backward(distance) // 向当前画笔相反方向移动distance像素长度</span><br><span class="line">turtle.right(degree) //顺时针移动degree°</span><br><span class="line">turtle.left(degree) //逆时针移动degree°</span><br><span class="line">turtle.pendown() //移动时绘制图形,缺省时也为绘制</span><br><span class="line">turtle.goto(x,y) //将画笔移动到坐标为x,y的位置</span><br><span class="line">turtle.penup() //移动时不绘制图形,提起笔，用于另起一个地方绘制时用</span><br><span class="line">turtle.speed(speed)// 画笔绘制的速度范围[0,10]整数</span><br><span class="line">turtle.circle() //画圆,半径为正(负),表示圆心在画笔的左边(右边)画圆</span><br></pre></td></tr></table></figure>



<h2 id="画笔控制命令"><a href="#画笔控制命令" class="headerlink" title="画笔控制命令:"></a>画笔控制命令:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">turtle.pensize(width)// 绘制图形时的宽度</span><br><span class="line">turtle.pencolor()// 画笔颜色</span><br><span class="line">turtle.fillcolor(colorstring) // 绘制图形的填充颜色</span><br><span class="line">turtle.color(color1, color2) // 同时设置pencolor=color1, fillcolor=color2</span><br><span class="line">turtle.filling() // 返回当前是否在填充状态</span><br><span class="line">turtle.begin_fill() // 准备开始填充图形</span><br><span class="line">turtle.end_fill() // 填充完成；</span><br><span class="line">turtle.hideturtle() // 隐藏箭头显示；</span><br><span class="line">turtle.showturtle() // 与hideturtle()函数对应</span><br></pre></td></tr></table></figure>



<h2 id="全局控制命令"><a href="#全局控制命令" class="headerlink" title="全局控制命令:"></a>全局控制命令:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">turtle.clear() // 清空turtle窗口，但是turtle的位置和状态不会改变</span><br><span class="line">turtle.reset() // 清空窗口，重置turtle状态为起始状态</span><br><span class="line">turtle.undo() // 撤销上一个turtle动作</span><br><span class="line">turtle.isvisible() // 返回当前turtle是否可见</span><br><span class="line">stamp() // 复制当前图形</span><br><span class="line">turtle.write(s[,font=(&quot;font-name&quot;,font_size,&quot;font_type&quot;)]) // 写文本，s为文本内容，font是字体的参数，里面分别为字体名称，大小和类型；font为可选项, font的参数也是可选项</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>2019年11月</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript学习3</title>
    <url>/2019/11/10/JavaScript3/</url>
    <content><![CDATA[<h1 id="js3"><a href="#js3" class="headerlink" title="js3"></a>js3</h1><h2 id="Math-函数"><a href="#Math-函数" class="headerlink" title="Math+函数"></a>Math+函数</h2><h3 id="js的Math对象"><a href="#js的Math对象" class="headerlink" title="js的Math对象"></a>js的Math对象</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Math方法</span><br><span class="line"></span><br><span class="line">Math.round()   //四舍五入取整</span><br><span class="line"></span><br><span class="line">Math.floor() //向下取整   floor:地板</span><br><span class="line"></span><br><span class="line">Math.ceil()  //向上取整   ceil:天花板</span><br><span class="line"></span><br><span class="line">Math.random() //随机数 0-10</span><br></pre></td></tr></table></figure>



<h2 id="js的函数"><a href="#js的函数" class="headerlink" title="js的函数"></a>js的函数</h2><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f()</span><br><span class="line"></span><br><span class="line">function f()&#123;</span><br><span class="line"></span><br><span class="line">	console.log(&quot;ok&quot;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f()            //打印两个ok先定义再调用</span><br></pre></td></tr></table></figure>



<h3 id="匿名函数-无法执行需要使用到函数表达式-函数表达式：（）-—-！"><a href="#匿名函数-无法执行需要使用到函数表达式-函数表达式：（）-—-！" class="headerlink" title="匿名函数   无法执行需要使用到函数表达式  函数表达式：（） + —  ！ ~"></a>匿名函数   无法执行需要使用到函数表达式  函数表达式：（） + —  ！ ~</h3><p>+function(){</p>
<p>​    }（）   //自执行</p>
<p>（function(){</p>
<p>​    }）（）</p>
<p>或</p>
<p>（function(){</p>
<p>​    }（））</p>
<p>function sum(x,y,z){</p>
<p>​    console.log(“x:”+x+”y:”+y”z:”+z)  </p>
<p>​    }</p>
<p>sum(1,2,3)    x:1y:2z:3</p>
<p>sum(1,2)    x:1y:2 undefind</p>
<p>sum(1,2,3,4)   x:1y:2z:3</p>
<p>//修正：适用多种参数</p>
<p>function（）{</p>
<p>​    console.log(arguments)</p>
<p>​    </p>
<p>}</p>
<p>//函数返回值  return</p>
<p>//声明提前</p>
<p>//函数作用域</p>
<h2 id="时间对象"><a href="#时间对象" class="headerlink" title="时间对象"></a>时间对象</h2><h3 id="获取时间对象"><a href="#获取时间对象" class="headerlink" title="获取时间对象"></a>获取时间对象</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var time=new Date()</span><br><span class="line"></span><br><span class="line">console.log(time)  //当前时间</span><br><span class="line"></span><br><span class="line">console.log(time.getTime())  //时间戳：每个地区时间都不一样</span><br><span class="line"></span><br><span class="line">//年月日  时分秒</span><br><span class="line"></span><br><span class="line"> var year=time.getFullYear()</span><br><span class="line"></span><br><span class="line">var mon=time.getMonth()+1   //外国人从0月开始</span><br><span class="line"></span><br><span class="line">var date=time.getDate()+1</span><br><span class="line"></span><br><span class="line">var hour=time.getHours()</span><br><span class="line"></span><br><span class="line">var min=time.getMinutes()</span><br><span class="line"></span><br><span class="line">var sec=time.getSeconds()</span><br><span class="line"></span><br><span class="line">console.log(year+&quot;年&quot;+mon+&quot;月&quot;)//拼接</span><br></pre></td></tr></table></figure>



<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="延时器"><a href="#延时器" class="headerlink" title="延时器"></a>延时器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setTimeout(function()&#123;</span><br><span class="line"></span><br><span class="line">	console.log(&quot;onionwing&quot;)</span><br><span class="line"></span><br><span class="line">&#125;,1000)		//1s后打印onionwing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function f()&#123; console.log(&quot;onionwing&quot;)&#125;</span><br><span class="line"></span><br><span class="line">setTimeout(f,1000)  //推荐这个</span><br></pre></td></tr></table></figure>



<h3 id="定时器-1"><a href="#定时器-1" class="headerlink" title="定时器"></a>定时器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var  st =setInterval(f,1000)</span><br><span class="line"></span><br><span class="line">clearInterval()  //清除</span><br><span class="line"></span><br><span class="line">setInterval(f,1000)</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>2019年11月</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>人生只能一路向前</title>
    <url>/9999/11/11/%E4%BA%BA%E7%94%9F%E5%8F%AA%E8%83%BD%E4%B8%80%E8%B7%AF%E5%90%91%E5%89%8D/</url>
    <content><![CDATA[<p>欢迎来到编程小学生onionwing的博客</p>
<p>2019/12/11 0:15   新博客: onionwingcloud.xzy  开始迁移博客，保持两边更新</p>
<p>2019/12/8：计划迁移博客到自己服务器并在12月内完成</p>
<p>2019/12/3：计划开启博客的评论</p>
<p>2020/10/13: orz</p>
]]></content>
  </entry>
  <entry>
    <title>爬取豆瓣中流浪地球的评论</title>
    <url>/2019/12/02/%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E4%B8%AD%E6%B5%81%E6%B5%AA%E5%9C%B0%E7%90%83/</url>
    <content><![CDATA[<p>待重构    </p>
<p>全部未展开 √</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">collection = MongoClient()[<span class="string">'local'</span>][<span class="string">'douban'</span>]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">21441</span>, <span class="number">20</span>):</span><br><span class="line">    get_time = []</span><br><span class="line">    get_name = []</span><br><span class="line">    get_connect = []</span><br><span class="line">    get_xingji = []</span><br><span class="line">    headers = &#123;<span class="string">'Host'</span>: <span class="string">'movie.douban.com'</span>,<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36'</span>&#125;</span><br><span class="line">    html = requests.get(<span class="string">f'https://movie.douban.com/subject/26266893/reviews?start=<span class="subst">&#123;j&#125;</span>'</span>, headers=headers)</span><br><span class="line">    selector = etree.HTML(html.text)</span><br><span class="line">    time_douban = selector.xpath(<span class="string">"//header/span[@class='main-meta']"</span>)</span><br><span class="line">    user_name = selector.xpath(<span class="string">"//header[@class='main-hd']/a[@class='name']"</span>)</span><br><span class="line">    connect = selector.xpath(<span class="string">"//div[@class='short-content']/text()"</span>)</span><br><span class="line">    xingji = selector.xpath(<span class="string">"//header/span[1]"</span>)</span><br><span class="line">    <span class="keyword">for</span> cat <span class="keyword">in</span> xingji:</span><br><span class="line">        get_xingji.append(cat.attrib.get(<span class="string">'title'</span>))</span><br><span class="line">    <span class="keyword">for</span> cat <span class="keyword">in</span> time_douban:</span><br><span class="line">        get_time.append(cat.text)</span><br><span class="line">    <span class="keyword">for</span> cat <span class="keyword">in</span> user_name:</span><br><span class="line">        get_name.append(cat.text)</span><br><span class="line">    <span class="keyword">for</span> cat <span class="keyword">in</span> connect:</span><br><span class="line">        get_connect.append(re.findall(<span class="string">r" \s+(.*?)\.\.\.|\("</span>, cat, re.S))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(get_time)):</span><br><span class="line">        collection.insert_one(&#123;<span class="string">'时间：'</span>: get_time[i], <span class="string">'用户名：'</span>: get_name[i], <span class="string">'星级'</span>: get_xingji[i], <span class="string">'内容：'</span>: get_connect[i][<span class="number">0</span>]&#125;)</span><br><span class="line">    print(<span class="string">f'https://movie.douban.com/subject/26266893/reviews?start=<span class="subst">&#123;j&#125;</span>'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>全部评论内容思路  </p>
<p>2019.12.2 18:07  </p>
<p>第一种：一页全部展开拿到完整的html  </p>
<p>第二种：拿到每个评论的标题里的href即评论的单独页面再提取文本 （问题：如果有图片怎么办？）</p>
<p>2019.12.4  拿到全文思路</p>
<p>展开评论后 XHR出现一个full 再头里找到它的URL</p>
<p>如 <a href="https://movie.douban.com/j/review/9936402/full">https://movie.douban.com/j/review/9936402/full</a>   里面可拿到全文</p>
<p>拿到  //div[@class=’main-bd’]/h2/a/@href  里的href</p>
<p>如 <a href="https://movie.douban.com/review/9936402/">https://movie.douban.com/review/9936402/</a></p>
<p>即在href里拼接 j 与 full 后再爬取全文</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line">collection = MongoClient()[<span class="string">'local'</span>][<span class="string">'douban'</span>]</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">connect = <span class="string">''</span></span><br><span class="line">headers = &#123;<span class="string">'Host'</span>: <span class="string">'movie.douban.com'</span>,</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">html = requests.get(<span class="string">f'https://movie.douban.com/j/review/9936402/full'</span>, headers=headers)</span><br><span class="line">selector = etree.HTML(html.json()[<span class="string">"body"</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> selector.xpath(<span class="string">"//p/text()"</span>):</span><br><span class="line">    connect = connect + i + <span class="string">'\r\n'</span></span><br><span class="line">print(connect)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>2019年12月</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>猿人学3.访问逻辑 - 推心置腹</title>
    <url>/2020/11/14/%E7%8C%BF%E4%BA%BA%E5%AD%A63.%E8%AE%BF%E9%97%AE%E9%80%BB%E8%BE%91%20-%20%E6%8E%A8%E5%BF%83%E7%BD%AE%E8%85%B9(%E7%AE%80%E5%8D%95)/</url>
    <content><![CDATA[<p>#分析</p>
<p><a href="http://match.yuanrenxue.com/match/3">题目</a></p>
<p> ##1.chrome调试可查看到需要的数据在 <strong>‘3’</strong> 中</p>
<p><img src="https://s3.ax1x.com/2020/11/14/DCz7V0.png" alt="data"></p>
<p>##2.查请求头可知  Cookie中的sessionid是改变的</p>
<p>需要我们找到<strong>sessionid</strong></p>
<p><img src="https://s3.ax1x.com/2020/11/14/DCz5Ks.png" alt="head"></p>
<h2 id="3-观察可知logo是在3之前请求的-sessionid大概率在logo中"><a href="#3-观察可知logo是在3之前请求的-sessionid大概率在logo中" class="headerlink" title="3.观察可知logo是在3之前请求的  sessionid大概率在logo中"></a>3.观察可知<strong>logo</strong>是在3之前请求的  sessionid大概率在logo中</h2><p>发现responnse headers中的set-Cookie<img src="https://s3.ax1x.com/2020/11/14/DCzIrn.png" alt="set-cook"></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        url = <span class="string">'http://match.yuanrenxue.com/logo'</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">                <span class="string">'Referer'</span>: <span class="string">'http://match.yuanrenxue.com/match/3'</span>,</span><br><span class="line">                <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line">                <span class="string">'User-Agent'</span>: <span class="string">'yuanrenxue.project'</span></span><br><span class="line">                &#125;</span><br><span class="line">        response = requests.post(url, headers=headers)</span><br><span class="line">        sessionid = re.findall(<span class="string">'(?&lt;=sessionid=).+?(?=;)'</span>, response.headers[<span class="string">'Set-Cookie'</span>])[<span class="number">0</span>]</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'Cookie'</span>: <span class="string">'sessionid='</span> + sessionid,</span><br><span class="line">            <span class="string">'Referer'</span>: <span class="string">'http://match.yuanrenxue.com/match/3'</span>,</span><br><span class="line">            <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'yuanrenxue.project'</span></span><br><span class="line">        &#125;</span><br><span class="line">        url = <span class="string">'http://match.yuanrenxue.com/api/match/3?page='</span> + str(i)</span><br><span class="line">        response = requests.get(url, headers=headers).json()</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response[<span class="string">'data'</span>]:</span><br><span class="line">            res.append(each[<span class="string">"value"</span>])</span><br><span class="line"></span><br><span class="line">    print(Counter(res).most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>2020年11月</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>python</tag>
        <tag>js渗透</tag>
      </tags>
  </entry>
</search>
